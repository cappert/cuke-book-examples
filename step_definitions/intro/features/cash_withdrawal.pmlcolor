Feature: Cash withdrawal

  Scenario: Successful withdrawal from an account in credit
    <literal:shade fg='magenta'>Given I have $100 in my account</literal:shade>
    <literal:shade fg='magenta'>When I request $20</literal:shade>
    <literal:shade fg='magenta'>Then $20 should be dispensed</literal:shade>

1 scenario (<literal:shade fg='magenta'>1 undefined</literal:shade>)
3 steps (<literal:shade fg='magenta'>3 undefined</literal:shade>)
0m0.001s
<literal:shade fg='magenta'></literal:shade>
<literal:shade fg='magenta'>You can implement step definitions for undefined steps with these snippets:</literal:shade>
<literal:shade fg='magenta'></literal:shade>
<literal:shade fg='magenta'>Given /^I have \$(\d+) in my account$/ do |arg1|</literal:shade>
<literal:shade fg='magenta'>  pending # express the regexp above with the code you wish you had</literal:shade>
<literal:shade fg='magenta'>end</literal:shade>
<literal:shade fg='magenta'></literal:shade>
<literal:shade fg='magenta'>When /^I request \$(\d+)$/ do |arg1|</literal:shade>
<literal:shade fg='magenta'>  pending # express the regexp above with the code you wish you had</literal:shade>
<literal:shade fg='magenta'>end</literal:shade>
<literal:shade fg='magenta'></literal:shade>
<literal:shade fg='magenta'>Then /^\$(\d+) should be dispensed$/ do |arg1|</literal:shade>
<literal:shade fg='magenta'>  pending # express the regexp above with the code you wish you had</literal:shade>
<literal:shade fg='magenta'>end</literal:shade>
<literal:shade fg='red'></literal:shade>
<literal:shade fg='red'>If you want snippets in a different programming language,</literal:shade>
<literal:shade fg='red'>just make sure a file with the appropriate file extension</literal:shade>
<literal:shade fg='red'>exists where cucumber looks for step definitions.</literal:shade>
